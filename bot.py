import asyncio
import logging
import os
import sys
from pathlib import Path
from datetime import datetime

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage

from config import (
    BOT_TOKEN,
    ADMIN_IDS,
    FLOOD_LIMIT,
    FLOOD_PERIOD,
    FLOOD_BLOCK_TIME,
    AUTHORIZED_NUMBERS,
)

if os.getenv("RUN_IN_DOCKER") != "1":
    print("üö´ –ó–∞–ø—É—Å–∫ –∑–∞–ø—Ä–µ—â—ë–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Docker.")
    sys.exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ—É–Ω–∫—Ü–∏–π
from db import init_db, clear_blocks, remove_expired_blocks
from utils import DATA_JSON, FLAT_DATA  # –¢–æ–ª—å–∫–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
from handlers.menu import (
    router as menu_router,
    register_bot_instance,
    on_startup,
    read_json,
    flatten_json
)

from handlers.admin import router as admin_router  # –ù–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
from middlewares.flood_control import FloodControlMiddleware

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
LOG_FILE = "bot.log"
for handler in logging.root.handlers[:]:
    logging.root.removeHandler(handler)

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(filename)s:%(lineno)d - %(message)s",
    handlers=[
        logging.FileHandler(LOG_FILE, encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ ===
if not BOT_TOKEN:
    logger.critical("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω BOT_TOKEN –≤ .env. –ó–∞–≤–µ—Ä—à–∞–µ–º.")
    sys.exit(1)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ===
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
register_bot_instance(bot)

storage = MemoryStorage()  # TODO: –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ PostgreSQLStorage –≤ –±—É–¥—É—â–µ–º
dp = Dispatcher(storage=storage)
dp.startup.register(on_startup)

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ middleware –∏ —Ä–æ—É—Ç–µ—Ä–æ–≤ ===
dp.message.middleware(
    FloodControlMiddleware(
        limit=FLOOD_LIMIT,
        period=FLOOD_PERIOD,
        block_time=FLOOD_BLOCK_TIME,
        admin_ids=ADMIN_IDS
    )
)
dp.include_router(menu_router)
dp.include_router(admin_router)  # –ü–æ–¥–∫–ª—é—á–∞–µ–º /users

# === –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –æ—á–∏—Å—Ç–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ ===
async def cleanup_expired_blocks():
    while True:
        try:
            remove_expired_blocks()
        except Exception as e:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {e}")
        await asyncio.sleep(300)

# === –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ===
async def main():
    init_db() # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã
    from config import get_authorized_numbers
    from db import remove_revoked_users

    AUTHORIZED_NUMBERS = get_authorized_numbers()
    removed_users = remove_revoked_users(AUTHORIZED_NUMBERS)
    if removed_users:
        for uid, num in removed_users:
            logger.info(f"üóë –£–¥–∞–ª—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —Å —Ç–∞–±–µ–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º {num} (—É–¥–∞–ª—ë–Ω –∏–∑ .env)")

    clear_blocks()    # –ß–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    asyncio.create_task(cleanup_expired_blocks())  # –§–æ–Ω. –∑–∞–¥–∞—á–∞

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    data_path = Path(__file__).parent / "data.json"
    try:
        loaded = await read_json(data_path)
        if not loaded:
            logger.critical("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ data.json. –ó–∞–≤–µ—Ä—à–∞–µ–º.")
            sys.exit(1)

        DATA_JSON.clear()
        DATA_JSON.update(loaded)
        FLAT_DATA.clear()
        FLAT_DATA.extend(flatten_json(DATA_JSON))
        logger.info(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(FLAT_DATA)} –∑–∞–ø–∏—Å–µ–π –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ data.json: {e}")
        sys.exit(1)

    logger.info(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(AUTHORIZED_NUMBERS)}")

    try:
        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        await dp.start_polling(bot)
    finally:
        await bot.session.close()
        logger.info("üîí –°–µ—Å—Å–∏—è Telegram API –∑–∞–∫—Ä—ã—Ç–∞")

# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
if __name__ == "__main__":
    try:
        asyncio.run(main())
    except asyncio.CancelledError:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ CancelledError ‚Äî graceful shutdown.")
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        logger.exception(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
