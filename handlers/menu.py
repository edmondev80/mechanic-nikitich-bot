import re
import asyncio
import logging
import html
import os
import bcrypt
from datetime import datetime
from functools import wraps
from aiogram import types, Router, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import get_authorized_numbers
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove,
    CallbackQuery
)
from dotenv import load_dotenv
import aiofiles
import json
from pathlib import Path
from db import (
    is_authorized, add_user, is_number_taken, is_same_user,
    add_block, remove_block, is_blocked, get_last_users, get_user_number
)

from db import (
    is_authorized, add_user, is_number_taken, is_same_user,
    add_block, remove_block, is_blocked, get_last_users
)
from config import BOT_TOKEN, AUTHORIZED_NUMBERS, ADMIN_IDS, BLOCK_DURATION, BASE_DIR
from utils import DATA_JSON, FLAT_DATA
from middlewares.auth import auth_required


router = Router()
logger = logging.getLogger(__name__)

bot_instance = None

def register_bot_instance(bot):
    global bot_instance
    bot_instance = bot

class MenuState(StatesGroup):
    path = State()
    authorized = State()
    searching = State()
    waiting_for_selection = State()

auth_attempts = {}
MAX_AUTH_ATTEMPTS = 3
INACTIVITY_TIMEOUT = 600
LAST_ACTIVE = {}

SYNONYMS = {
    "–∑–∞–ø—Ä–∞–≤–∫–∞": ["–∑–∞—Ä—è–¥–∫–∞", "–¥–æ–∑–∞–ø—Ä–∞–≤–∫–∞"],
    "–ø—Ä–æ–≤–µ—Ä–∫–∞": ["–∫–æ–Ω—Ç—Ä–æ–ª—å", "–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "–∏—Å–ø—ã—Ç–∞–Ω–∏–µ"],
    "–æ—á–∏—Å—Ç–∫–∞": ["—á–∏—Å—Ç–∫–∞", "–º–æ–π–∫–∞"],
    "–¥–µ–º–æ–Ω—Ç–∞–∂": ["–º–æ–Ω—Ç–∞–∂", "–∑–∞–º–µ–Ω–∞", "—Å–Ω—è—Ç–∏–µ", "—É—Å—Ç–∞–Ω–æ–≤–∫–∞"],
}

def escape_html(text: str) -> str:
    return html.escape(text)

def flatten_json(d, path=None):
    path = path or []
    flat = []
    if isinstance(d, dict):
        for k, v in d.items():
            flat.extend(flatten_json(v, path + [k]))
    else:
        flat.append({"–∫–∞—Ç–µ–≥–æ—Ä–∏—è": " > ".join(path), "–ø—É—Ç—å": path, "—Å—Å—ã–ª–∫–∞": str(d)})
    return flat

def generate_back_menu():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥"), KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
        resize_keyboard=True
    )

def generate_menu(current_data, is_root=True):
    buttons = []
    if is_root:
        buttons.append([KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")])
    for key in sorted(current_data):
        if not key.startswith("_"):
            buttons.append([KeyboardButton(text=key)])
    if not is_root:
        buttons.append([KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥"), KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    buttons.append([KeyboardButton(text="üö™ –í—ã–π—Ç–∏")])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_node_from_path(path_list):
    current_node = DATA_JSON
    for key in path_list:
        if isinstance(current_node, dict) and key in current_node:
            current_node = current_node[key]
        else:
            return None
    return current_node

def expand_query(query):
    query = query.lower().strip()
    terms = set([query])
    for key, synonyms in SYNONYMS.items():
        if query == key or query in synonyms:
            terms.add(key)
            terms.update(synonyms)
    return terms

def search_documents(query):
    search_terms = expand_query(query)
    result_paths = {}
    for entry in FLAT_DATA:
        entry_text = f"{entry['–∫–∞—Ç–µ–≥–æ—Ä–∏—è']} {entry['—Å—Å—ã–ª–∫–∞']}".lower()
        if any(term in entry_text for term in search_terms):
            key = entry["–ø—É—Ç—å"][1] if len(entry["–ø—É—Ç—å"]) > 1 else entry["–ø—É—Ç—å"][0]
            result_paths[key] = entry["–ø—É—Ç—å"][:2]
    return result_paths

def log_login_attempt(user_id, full_name, number, status):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    line = f"{timestamp} | LOGIN ATTEMPT | user_id={user_id} | full_name={full_name} | number={number} | status={status}\n"
    with open("login_attempts.log", "a", encoding="utf-8") as f:
        f.write(line)
    logger.info(line.strip())

def log_auth_block(user_id, full_name, number, attempts):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    line = f"{timestamp} | AUTH BLOCK | user_id={user_id} | full_name={full_name} | number={number} | attempts={attempts}\n"
    with open("auth_blocks.log", "a", encoding="utf-8") as f:
        f.write(line)
    logger.warning(line.strip())

def log_admin_violation(user_id, full_name, command):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    line = f"{timestamp} | ADMIN VIOLATION | user_id={user_id} | full_name={full_name} | tried: {command}\n"
    with open("admin_violations.log", "a", encoding="utf-8") as f:
        f.write(line)
    logger.warning(line.strip())

async def read_json(file_path: str) -> dict:
    try:
        async with aiofiles.open(file_path, mode='r', encoding='utf-8') as f:
            contents = await f.read()
        return json.loads(contents)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
        return {}

def log_access_request(user_id: int, full_name: str, number: str):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    line = (
        f"{timestamp} | ACCESS REQUEST | user_id={user_id} | "
        f"full_name={full_name} | number={number}\n"
    )
    with open("access_requests.log", "a", encoding="utf-8") as f:
        f.write(line)
    logger.info(line.strip())


logger = logging.getLogger(__name__)

import bcrypt

def check_still_authorized(user_id: int) -> bool:
    from db import get_user_number
    number_hash = get_user_number(user_id)

    if not number_hash:
        return False

    for number in AUTHORIZED_NUMBERS:
        if bcrypt.checkpw(number.encode(), number_hash.encode()):
            return True

    return False

@router.callback_query(F.data.startswith("deny_number:"))
async def handle_deny_number(callback: CallbackQuery):
    try:
        _, user_id = callback.data.split(":")
        user_id = int(user_id)

        await callback.answer("üö´ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ")

        await callback.message.edit_text("‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω.")

        try:
            await bot_instance.send_message(
                chat_id=user_id,
                text="‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
        except Exception as e:
            logger.warning(f"[NOTIFY DENY FAIL] {e}")

    except Exception as e:
        logger.exception(f"[DENY NUMBER FAIL] {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏.")


@router.callback_query(F.data.startswith("add_number:"))
async def handle_add_number(callback: CallbackQuery):
    try:
        _, user_id, number = callback.data.split(":")
        user_id = int(user_id)
        number = number.strip()

        env_path = Path(BASE_DIR) / ".env"

        if not env_path.exists():
            await callback.answer("‚ùå .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        with open(env_path, "r", encoding="utf-8") as f:
            lines = f.readlines()

        new_lines = []
        found = False
        for line in lines:
            if line.startswith("AUTHORIZED_NUMBERS="):
                found = True
                existing = line.strip().split("=", 1)[1]
                nums = [x.strip() for x in existing.split(",") if x.strip()]
                if number not in nums:
                    nums.append(number)
                new_lines.append(f'AUTHORIZED_NUMBERS={" ,".join(nums)}\n')
            else:
                new_lines.append(line)

        if not found:
            new_lines.append(f'AUTHORIZED_NUMBERS={number}\n')

        with open(env_path, "w", encoding="utf-8") as f:
            f.writelines(new_lines)

        load_dotenv(dotenv_path=env_path, override=True)
        AUTHORIZED_NUMBERS.add(number)

        await callback.answer("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ!")
        await callback.message.edit_text(
            f"‚úÖ –¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä <code>{number}</code> –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫.",
            parse_mode="HTML"
        )

        try:
            await bot_instance.send_message(
                chat_id=user_id,
                text="‚úÖ –í–∞–º –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –≤—Ö–æ–¥–∞."
            )
        except Exception as e:
            logger.warning(f"[NOTIFY USER FAIL] {e}")

    except Exception as e:
        logger.exception(f"[ADD NUMBER FAIL] {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏.")



def admin_only(handler):
    @wraps(handler)
    async def wrapper(message: types.Message, *args, **kwargs):
        user_id = message.from_user.id
        if user_id not in ADMIN_IDS:
            if is_blocked(user_id):
                await message.answer("‚õî –í—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
                return
            await handle_admin_violation(user_id, message.from_user.full_name, message.text)
            return
        await handler(message, *args, **kwargs)
    return wrapper

async def handle_admin_violation(user_id: int, full_name: str, command: str):
    full_name = escape_html(full_name)
    command = escape_html(command)
    log_admin_violation(user_id, full_name, command)

    unblock_time = int(datetime.now().timestamp()) + BLOCK_DURATION
    add_block(user_id, unblock_time)

    try:
        for admin_id in ADMIN_IDS:
            await bot_instance.send_message(
                admin_id,
                f"üö´ <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞:</b> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {full_name} ({user_id}) "
                f"–ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å <code>{command}</code> –∏ –±—ã–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.",
                parse_mode="HTML"
            )
    except Exception as e:
        logger.error(f"[ADMIN BLOCK ALERT] –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤: {e}")

    try:
        await bot_instance.send_message(
            user_id,
            "‚õî –í—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ –ø–æ–ø—ã—Ç–∫—É –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ.\n\n"
            "üîì –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω–∏–º–µ—Ç—Å—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç."
        )
    except Exception:
        pass

    await asyncio.sleep(BLOCK_DURATION)
    remove_block(user_id)

async def delete_previous_message(message: types.Message):
    try:
        await bot_instance.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)
    except Exception as e:
        logger.warning(f"[DELETE ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

async def read_log_file(path: str, empty_message: str):
    try:
        with open(path, "r", encoding="utf-8") as f:
            lines = f.readlines()
            return "".join(lines[-10:]) if lines else empty_message
    except FileNotFoundError:
        return empty_message
    except Exception as e:
        logger.error(f"[LOG READ ERROR] {path}: {e}")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∂—É—Ä–Ω–∞–ª–∞."

@router.message(Command("help"))
async def help_command(message: types.Message):
    logger.info(f"[HELP] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å")
    await message.answer(
        "üõ† <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start ‚Äî –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help ‚Äî –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º\n"
        "/search ‚Äî –ü–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏\n"
        "/reset ‚Äî –°–±—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n\n"
        "üí¨ <i>–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–∏—Å–∫–æ–º.</i>",
        parse_mode="HTML"
    )

@router.message(Command("search"))
@auth_required
async def start_search(message: types.Message, state: FSMContext):
    await state.set_state(MenuState.searching)
    await message.answer("üîé –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=ReplyKeyboardRemove())


@router.message(Command("reset"))
@auth_required
async def reset_auth(message: types.Message, state: FSMContext):
    from db import remove_user
    user_id = message.from_user.id
    remove_user(user_id)
    await state.clear()
    await message.answer("üîÅ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞.\nüîê –í–≤–µ–¥–∏—Ç–µ —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–≤—Ç–æ—Ä–Ω–æ:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(MenuState.authorized)


@router.message(Command("admin"))
@admin_only
async def admin_panel(message: types.Message):
    await message.answer(
        "üë®‚Äçüîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>:\n"
        "/log ‚Äî –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞\n"
        "/violations ‚Äî –ü–æ–ø—ã—Ç–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞–º\n"
        "/clear_log ‚Äî –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥ –≤—Ö–æ–¥–∞\n"
        "/reset ‚Äî –°–±—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n"
        "/start ‚Äî –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        parse_mode="HTML"
    )

@router.message(Command("log"))
@admin_only
async def show_login_log(message: types.Message):
    users = get_last_users()
    if not users:
        await message.answer("üì≠ –ñ—É—Ä–Ω–∞–ª –ø—É—Å—Ç.")
        return

    lines = [
        f"üë§ <b>{u[2]}</b>\nID: <code>{u[0]}</code>\n–ù–æ–º–µ—Ä: {u[1]}\n‚è± {u[3]}"
        for u in users
    ]
    await message.answer("\n\n".join(lines), parse_mode="HTML")


@router.message(Command("violations"))
@admin_only
async def show_admin_violations(message: types.Message):
    text = await read_log_file("admin_violations.log", "üì≠ –ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ.")
    await message.answer(f"<pre>{escape_html(text)}</pre>", parse_mode="HTML")

@router.message(Command("clear_log"))
@admin_only
async def clear_login_log(message: types.Message):
    import os
    try:
        if os.path.exists("login_attempts.log"):
            os.remove("login_attempts.log")
            await message.answer("üßπ –õ–æ–≥ –≤—Ö–æ–¥–∞ –æ—á–∏—â–µ–Ω.")
        else:
            await message.answer("üì≠ –õ–æ–≥ —É–∂–µ –ø—É—Å—Ç.")
    except Exception as e:
        logger.error(f"[CLEAR LOG ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ª–æ–≥: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ–≥–∞.")

@router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    try:
        for i in range(1, 100):
            await bot_instance.delete_message(chat_id=message.chat.id, message_id=message.message_id - i)
    except Exception:
        pass

    user_id = message.from_user.id
    full_name = message.from_user.full_name

    if is_authorized(user_id):
        if not check_still_authorized(user_id):
            from db import remove_user
            remove_user(user_id)
            await state.clear()
            await message.answer(
                "‚õî –í–∞—à –¥–æ—Å—Ç—É–ø –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                "üîê –í–≤–µ–¥–∏—Ç–µ —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–≤—Ç–æ—Ä–Ω–æ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Å—Ç—É–ø–∞:",
                reply_markup=ReplyKeyboardRemove()
            )
            await state.set_state(MenuState.authorized)
            return

        await state.set_state(MenuState.path)
        await message.answer(
            escape_html("üëã –º–µ—Ö–∞–Ω–∏–∫ –ù–∏–∫–∏—Ç–∏—á —Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å —Å–Ω–æ–≤–∞!\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"),
            parse_mode="HTML",
            reply_markup=generate_menu(DATA_JSON)
        )
    else:
        await state.clear()
        await state.set_state(MenuState.authorized)
        await message.answer("üîê –í–≤–µ–¥–∏—Ç–µ —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –≤—Ö–æ–¥–∞:", reply_markup=ReplyKeyboardRemove())
        await message.answer("‚ÑπÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ /help, –µ—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–∞—Ö.")

@router.message(MenuState.path)
async def navigate_menu(message: types.Message, state: FSMContext):
    if not message.text:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç.")
        return
    
    user_text = message.text.strip()
    user_text_lower = user_text.lower()
    if user_text in ["/search", "search", "/reset", "reset"]:
        await message.answer("‚ö†Ô∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search –∏–ª–∏ /reset, –∞ –Ω–µ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç.")
        return

    current_path = (await state.get_data()).get("path", [])

    if user_text_lower in ["üö™ –≤—ã–π—Ç–∏", "–≤—ã–π—Ç–∏"]:
        await state.clear()
        await message.answer(
            "üîí –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n/start ‚Äî —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞",
            reply_markup=ReplyKeyboardRemove(),
            parse_mode="HTML"  
        )
        return

    elif user_text_lower in ["‚¨Ö –Ω–∞–∑–∞–¥", "–Ω–∞–∑–∞–¥"]:
        if current_path:
            current_path.pop()
            await state.update_data(path=current_path)
        current_node = get_node_from_path(current_path)
        await message.answer("üìÇ –ù–∞–∑–∞–¥", reply_markup=generate_menu(current_node, is_root=not current_path))
        return

    elif user_text_lower in ["üè† –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        await state.update_data(path=[])
        await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=generate_menu(DATA_JSON))
        return

    if user_text == "üîç –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏":
        await state.set_state(MenuState.searching)
        await message.answer("üîé –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=ReplyKeyboardRemove())
        return

    current_node = get_node_from_path(current_path)
    matching_key = next((key for key in current_node if key.lower() == user_text), None)
    if matching_key:
        user_text = matching_key
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–†–µ—Å–µ—Ç—ã"
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ä–∞–∑–¥–µ–ª "–†–µ—Å–µ—Ç—ã"
        if user_text.lower() == "—Ä–µ—Å–µ—Ç—ã":
            from config import ADMIN_IDS
            from db import is_subscribed
            if message.from_user.id not in ADMIN_IDS and not is_subscribed(message.from_user.id):
                from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

                subscription_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É", url="https://t.me/eduard_admin")]
                ])

                await bot_instance.send_photo(
                    chat_id=message.chat.id,
                    photo=types.FSInputFile("qr.png"),
                    caption=(
                        "üîí <b>–†–∞–∑–¥–µ–ª ¬´–†–µ—Å–µ—Ç—ã¬ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ</b>\n\n"
                        "üí≥ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 199‚ÇΩ (—Ä–∞–∑–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂)\n\n"
                        "üì∑ <b>–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –≤—ã—à–µ –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ –°–ë–ü</b>\n\n"
                        "üìù –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–µ—Ä–µ–≤–æ–¥—É —É–∫–∞–∂–∏—Ç–µ —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ Telegram username.\n\n"
                        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–æ–±—â–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                    ),
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîë –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É", url="https://t.me/VirtuozEV")]
                    ])
                )

                return

        current_path.append(user_text)
        await state.update_data(path=current_path)
        next_node = current_node[user_text]

        if isinstance(next_node, dict): 
            description = next_node.get("_–æ–ø–∏—Å–∞–Ω–∏–µ")
            submenu = {k: v for k, v in next_node.items() if not k.startswith("_")}

            if description and not submenu:
                # –¢–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ, –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π ‚Äî –≤—ã–≤–æ–¥–∏–º –∏ –≤—ã—Ö–æ–¥–∏–º
                await message.answer(f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n\n{escape_html(description)}", parse_mode="HTML", reply_markup=generate_back_menu())
                return

            if description:
                await message.answer(f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n\n{escape_html(description)}", parse_mode="HTML")

            if submenu:
                await message.answer(
                    f"üìÅ –†–∞–∑–¥–µ–ª: <b>{escape_html(user_text)}</b>",
                    parse_mode="HTML",
                    reply_markup=generate_menu(submenu, is_root=False)
                )
            else:
                await message.answer(
                    f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n\n{escape_html(str(next_node))}",
                    parse_mode="HTML",
                    reply_markup=generate_back_menu()
                )

        else:
            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî —Å–ª–æ–≤–∞—Ä—å –∏ –≤ –Ω—ë–º –µ—Å—Ç—å _–æ–ø–∏—Å–∞–Ω–∏–µ
            if isinstance(next_node, dict) and "_–æ–ø–∏—Å–∞–Ω–∏–µ" in next_node:
                description = next_node["_–æ–ø–∏—Å–∞–Ω–∏–µ"]
            else:
                description = str(next_node)

            await message.answer(
                f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n\n{escape_html(description)}",
                parse_mode="HTML",
                reply_markup=generate_back_menu()
            )

@router.message(MenuState.authorized)
async def handle_authorization(message: types.Message, state: FSMContext):
    if message.text.startswith("/"):
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä.")
        return

    start_time = datetime.now()
    number = message.text.strip()
    user_id = message.from_user.id
    full_name = message.from_user.full_name
    logger.info(f"[TIME] START handle_authorization | {start_time}")

    if is_blocked(user_id):
        logger.info(f"[TIME] BLOCKED | {datetime.now() - start_time}")
        await message.answer("‚õî –í—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if number in AUTHORIZED_NUMBERS:
        try:
            add_user(user_id, number, full_name)
            logger.info(f"[TIME] USER ADDED TO DB | {datetime.now() - start_time}")
            log_login_attempt(user_id, full_name, number, "accepted")
            auth_attempts.pop(user_id, None)
            await state.set_state(MenuState.path)
            await message.answer(
                f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {escape_html(full_name)} –∫ –º–µ—Ö–∞–Ω–∏–∫—É –ù–∏–∫–∏—Ç–∏—á—É üîß‚ú®.",
                parse_mode="HTML",
                reply_markup=generate_menu(DATA_JSON)
            )
            logger.info(f"[TIME] SUCCESS RESPONSE SENT | {datetime.now() - start_time}")
            return
        except ValueError as e:
            warning = await message.answer(str(e))
            logger.info(f"[TIME] DUPLICATE NUMBER ERROR | {datetime.now() - start_time}")
            log_login_attempt(user_id, full_name, number, "rejected: duplicate number")
            await asyncio.sleep(5)
            try:
                await warning.delete()
                await message.delete()
            except Exception:
                pass
            await message.answer("üîê –í–≤–µ–¥–∏—Ç–µ —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –≤—Ö–æ–¥–∞ –µ—â—ë —Ä–∞–∑:")
            return


    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
    count = auth_attempts.get(user_id, 0) + 1
    auth_attempts[user_id] = count
    log_login_attempt(user_id, full_name, number, f"denied (attempt {count})")

    if count >= MAX_AUTH_ATTEMPTS:
        unblock_time = int(datetime.now().timestamp()) + BLOCK_DURATION
        add_block(user_id, unblock_time)
        auth_attempts.pop(user_id, None)
        log_auth_block(user_id, full_name, number, count)

        logger.info(f"[TIME] BLOCKED USER | {datetime.now() - start_time}")

        if bot_instance:
            for admin_id in ADMIN_IDS:
                try:
                    await bot_instance.send_message(
                        chat_id=admin_id,
                        text=(
                            f"üö´ <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ –ª–æ–≥–∏–Ω—É</b>\n\n"
                            f"<b>–ò–º—è:</b> {escape_html(full_name)}\n"
                            f"<b>ID:</b> <code>{user_id}</code>\n"
                            f"<b>–í–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–æ–º–µ—Ä:</b> <code>{escape_html(number)}</code>\n"
                            f"<b>–ü–æ–ø—ã—Ç–∫–∏:</b> {count}\n"
                            f"‚è± –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ {BLOCK_DURATION // 60} –º–∏–Ω—É—Ç(—ã)"
                        ),
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logger.error(f"[ADMIN ALERT] –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")

        await message.answer(
            f"‚õî –ü—Ä–µ–≤—ã—à–µ–Ω–æ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞.\n–í—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ {BLOCK_DURATION // 60} –º–∏–Ω—É—Ç(—ã)."
        )
        return

    # –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø
    await message.answer("üì® –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

    logger.info(f"[TIME] ACCESS REQUEST SENT | {datetime.now() - start_time}")

    if bot_instance:
        for admin_id in ADMIN_IDS:
            try:
                await bot_instance.send_message(
                    chat_id=admin_id,
                    text=(
                        f"üì• <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø</b>\n\n"
                        f"<b>–ò–º—è:</b> {escape_html(full_name)}\n"
                        f"<b>ID:</b> <code>{user_id}</code>\n"
                        f"<b>–í–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–æ–º–µ—Ä:</b> <code>{escape_html(number)}</code>\n\n"
                        f"‚¨áÔ∏è –î–æ–±–∞–≤—å—Ç–µ –≤ —Å–ø–∏—Å–æ–∫:"
                    ),
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [
                            InlineKeyboardButton(text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å", callback_data=f"add_number:{user_id}:{number}"),
                            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"deny_number:{user_id}")
                        ]
                    ]),
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"[ACCESS REQUEST] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")

    logger.info(f"[TIME] FINISHED handle_authorization | {datetime.now() - start_time}")

   
    log_access_request(user_id, full_name, number)

    return

def check_still_authorized(user_id: int) -> bool:
    from db import get_user_number
    number = get_user_number(user_id)
    return number in AUTHORIZED_NUMBERS

@router.message(MenuState.searching)
async def handle_search(message: types.Message, state: FSMContext):
    user_text = message.text.strip().lower()
    if user_text in ["/search", "search", "/reset", "reset"]:
        await message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥'.")
        return

    query = message.text.strip()
    matches = search_documents(query)

    if not matches:
        await message.answer("‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ.")
        return

    await state.set_state(MenuState.waiting_for_selection)
    await state.update_data(search_results=matches)

    buttons = [[KeyboardButton(text=key)] for key in sorted(matches)]
    buttons.append([KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥"), KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    await message.answer("üîç –ù–∞–π–¥–µ–Ω–æ:\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True))


@router.message(MenuState.waiting_for_selection)
async def handle_search_selection(message: types.Message, state: FSMContext):
    user_text = message.text
    data = await state.get_data()

    if user_text in data.get("search_results", {}):
        path = data["search_results"][user_text]
        await state.update_data(path=path)
        await state.set_state(MenuState.path)
        current_node = get_node_from_path(path)
        await message.answer(
            f"üìÅ –ü–µ—Ä–µ–π–¥–µ–Ω–æ –∫: <b>{escape_html(user_text)}</b>",
            parse_mode="HTML",
            reply_markup=generate_menu(current_node, is_root=False)
        )
    elif user_text == "‚¨Ö –ù–∞–∑–∞–¥":
        await state.set_state(MenuState.path)
        await message.answer("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", reply_markup=generate_menu(DATA_JSON))
    elif user_text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.update_data(path=[])
        await state.set_state(MenuState.path)
        await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=generate_menu(DATA_JSON))
    else:
        await message.answer("‚ùó –†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")

__all__ = [
    "router",
    "register_bot_instance",
    "on_startup"
]

INACTIVITY_TIMEOUT = 600  # 10 –º–∏–Ω—É—Ç
LAST_ACTIVE = {}

async def auto_logout_checker():
    while True:
        now = datetime.now()
        for user_id, last_active in list(LAST_ACTIVE.items()):
            if (now - last_active).total_seconds() > INACTIVITY_TIMEOUT:
                if is_authorized(user_id):
                    remove_block(user_id)
                    LAST_ACTIVE.pop(user_id)
        await asyncio.sleep(60)

async def on_startup(bot):
    asyncio.create_task(auto_logout_checker())

